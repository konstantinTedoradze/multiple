{"version":3,"sources":["redux/action-type.ts","components/left/left.tsx","components/right/right.tsx","App.tsx","redux/store.ts","redux/reducer.ts","index.tsx"],"names":["ActionType","Left","useState","num1","setNum1","num2","setNum2","dispatch","useDispatch","className","type","onChange","event","target","value","onClick","Mult","payload","Right","answer","useSelector","state","App","store","createStore","oldAppState","action","newAppState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAYA,E,qEAAAA,O,gBAAAA,M,uBCmCGC,EA3BF,WAAoB,IAAD,EACJC,mBAAS,GADL,mBACrBC,EADqB,KACfC,EADe,OAEJF,mBAAS,GAFL,mBAErBG,EAFqB,KAEfC,EAFe,KAGtBC,EAAWC,cAejB,OACI,sBAAKC,UAAU,OAAf,UACI,uBAAOC,KAAK,SAASC,SAdP,SAACC,GACnBR,GAASQ,EAAMC,OAAOC,UAa8B,uBAChD,uBAAOJ,KAAK,SAASC,SAXP,SAACC,GACnBN,GAASM,EAAMC,OAAOC,UAU8B,uBAChD,uBAAOJ,KAAK,SAASI,MAAM,OAAOC,QAAS,WAP/CR,EAAS,CAACG,KAAMV,EAAWgB,KAAMC,QAAS,CAACd,OAAME,iBCT1Ca,G,MAVD,WAEV,IAAMC,EAASC,aAAY,SAACC,GAAD,OAAqBA,EAAMF,UAClD,OACI,qBAAKV,UAAU,QAAf,SACKU,MCMFG,MATf,WACE,OACE,sBAAKb,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,Q,eCLD,IAAMc,EAAQC,aCAd,WAAiF,IAAjEC,EAAgE,uDAAxC,CAACN,OAAS,GAAIO,EAA0B,uCAE7EC,EAAW,eAAQF,GAEzB,OAAQC,EAAOhB,MACX,KAAKV,EAAWgB,KACZ,IAAIG,EAASO,EAAOT,QAAQd,KAAOuB,EAAOT,QAAQZ,KAClDsB,EAAYR,OAASA,EAM7B,OAAOQ,KCXXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACD,cAAC,EAAD,QAGFQ,SAASC,eAAe,W","file":"static/js/main.3234eaa5.chunk.js","sourcesContent":["export enum ActionType {\r\n    Mult\r\n}\r\n","import { ChangeEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./left.css\"\r\n\r\nimport { store } from '../../redux/store';\r\nimport { ActionType } from '../../redux/action-type';\r\nimport { useDispatch } from \"react-redux\";\r\n \r\nconst Left = () : JSX.Element =>{\r\n    const [num1, setNum1] = useState(0);\r\n    const [num2, setNum2] = useState(0);    \r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const onNum1Changed = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNum1(+event.target.value);\r\n    }\r\n    \r\n    const onNum2Changed = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNum2(+event.target.value);\r\n    }      \r\n\r\n    const onMultClicked = () => {\r\n        dispatch({type: ActionType.Mult, payload: {num1, num2}});\r\n    }\r\n\r\n    return (\r\n        <div className=\"left\">\r\n            <input type=\"number\" onChange={onNum1Changed} /><br />\r\n            <input type=\"number\" onChange={onNum2Changed} /><br />\r\n            <input type=\"button\" value=\"mult\" onClick={()=>onMultClicked()} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Left;","import \"./right.css\"\r\nimport { useSelector } from 'react-redux';\r\nimport { AppState } from \"../../redux/app-state\";\r\n\r\nconst Right = () : JSX.Element => {   \r\n\r\n    const answer = useSelector((state: AppState) => state.answer);\r\n        return (\r\n            <div className=\"right\">\r\n                {answer}                \r\n            </div>\r\n        );         \r\n}\r\n\r\nexport default Right;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Left from './components/left/left';\nimport Right from './components/right/right';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Left />\n        <Right />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore } from \"redux\";\r\nimport { reduce } from \"./reducer\";\r\n// import { AppState } from \"./app-state\";\r\n\r\n// export const store = createStore(reduce, new AppState());\r\nexport const store = createStore(reduce);\r\n\r\n","import { AppState } from \"./app-state\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./action-type\";\r\n\r\n// This function is NOT called direcrtly by you\r\nexport function reduce(oldAppState: AppState = {answer : 0}, action: Action): AppState {\r\n    // Cloning the oldState (creating a copy)\r\n    const newAppState = { ...oldAppState };\r\n\r\n    switch (action.type) {\r\n        case ActionType.Mult:\r\n            let answer = action.payload.num1 * action.payload.num2;\r\n            newAppState.answer = answer;\r\n            break;\r\n    }\r\n\r\n    // After returning the new state, it's being published to all subscribers\r\n    // Each component will render itself based on the new state\r\n    return newAppState;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n     <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}